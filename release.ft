# Proof 0.0.50

### 100% Test Coverage of Self

Proof now has 100% test coverage of it's own self. This took some decomposition of the executable into component parts for unit testing, so that the executable base in a minimal Arguable stub.

# Proof 0.0.49

## Whole New Scaffold

Got rid of the proof body parameter parsing. Using arity instead. If you call proof with a body that has a single argument, it is assumed to be a synchronous test.

```javascript
require('proof')(1, function (assert) {
    assert(1, 'one is true')
})
```

If you call proof with a body that has two arguments, it is assumed that the second argument is a callback and that the test is asynchronous.

```javascript
require('proof')(1, function (assert, callback) {
    setTimeout(function () {
        assert(1, 'one is still true even if you dawdle')
        callback(null, 1)
    }, 250)
})
```

Cadence is no longer a given, but because Cadence preserves arity, you can use it by immediately requiring it.

```javascript
require('proof')(1, require('cadence')(function (step, assert) {
    step(function () {
        setTimeout(step(), 250)
    }, function () {
        assert(1, 'one is still true even if you dawdle')
    })
})
```

Streamline.js also preserves arity, so we're playing nice with Streamline.js once again.

```javascript
#!/usr/bin/env _node

require('proof')(function (assert, _) {
    setTimeout(_, 250)
    assert(1, 'one is still true even if you dawdle')
})
```

Proof could now work on the browser after minification. No more source code trickery anywhere.

### Issue by Issue

 * Upgrade Cadence to 0.0.44. #270.
 * Create a line-by-line transform. #253.
 * Upgrade Arguable to 0.0.22. #248.
 * Specify known leaks. #236.
 * Upgrade Cadence to 0.0.43. #233.
 * Remove parameter parsing from scaffold. #232.
 * Upgrade Cadence to 0.0.42. #231.
